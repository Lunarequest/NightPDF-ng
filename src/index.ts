import { app, BrowserWindow, Menu, dialog, ipcMain, shell, protocol } from 'electron';
import menuTemplate from './menutemplate';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let wins = [];
let menuIsConfigured = false;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
    app.quit();
}


const createWindow = (filename: string = null): void => {
    // Create the browser window.
    const win = new BrowserWindow({
        width: 550,
        height: 420,
        minWidth: 565,
        minHeight: 200,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
        resizable: true,
        titleBarStyle: 'default',
        show: false,
    });
    wins.push(win);

    // and load the index.html of the app.
    win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    if (process.env.DEBUG) {
        win.webContents.openDevTools();
    }
    const wc = win.webContents;
    // if the window url changes from the inital one,
    // block the change and use xdg-open to open it
    wc.on('will-navigate', function (e, url) {
        if (url != wc.getURL()) {
            e.preventDefault();
            shell.openExternal(url);
        }
    });

    win.once('closed', () => {
        // Dereference the window object, usually you would store windows
        // in an array if your app supports multi windows, this is the time
        // when you should delete the corresponding element.
        wins = [];
    });   
    win.webContents.removeAllListeners('did-finish-load');
    win.webContents.once('did-finish-load', () => {
        if (filename) {
            win.webContents.send('file-open', filename);
            win.show();
        } else {
            win.show();
        }
    });

    if (!menuIsConfigured) {
        const menu = Menu.buildFromTemplate(menuTemplate.createMenu());

        menu.getMenuItemById('file-open').click = () => {
            openNewPDF();
        };

        menu.getMenuItemById('file-print').click = () => {
            const focusedWin = BrowserWindow.getFocusedWindow();
            focusedWin.webContents.send('file-print');
        };

        Menu.setApplicationMenu(menu);
        menuIsConfigured = true;
    }

    const openNewPDF = () => {
        dialog
            .showOpenDialog(null, {
                properties: ['openFile'],
                filters: [{ name: 'PDF Files', extensions: ['pdf'] }],
            })
            .then((dialogReturn) => {
                const filename = dialogReturn['filePaths'][0];
                if (filename) {
                    if (wins.length === 0) {
                        createWindow(filename.toString());
                    } else {
                        const focusedWin = BrowserWindow.getFocusedWindow();
                        if (focusedWin) {
                            focusedWin.webContents.send(
                                'file-open',
                                filename.toString()
                            );
                            focusedWin.maximize();
                        }
                    }
                }
            });
    };

    ipcMain.removeAllListeners('togglePrinting');
    ipcMain.once('togglePrinting', (_e, msg) => {
        const menu = Menu.getApplicationMenu();
        menu.getMenuItemById('file-print').enabled = Boolean(msg);
    });

    ipcMain.removeAllListeners('newWindow');
    ipcMain.once('newWindow', (_e, msg) => {
        console.log('opening ', msg, ' in new window');
        createWindow(msg);
    });

    ipcMain.removeAllListeners('resizeWindow');
    ipcMain.once('resizeWindow', (_e, _msg) => {
        const { width, height } = win.getBounds();
        if (width < 1000 || height < 650) {
            win.setResizable(true);
            win.setSize(1000, 650);
            win.center();
        }
    });

    ipcMain.removeAllListeners('openNewPDF');
    ipcMain.once('openNewPDF', (_e, _msg) => {
        openNewPDF();
    });
}

let fileToOpen = '';

const args = process.argv;
const argsLength = args.length;
if (argsLength > 1 && args[argsLength - 1].endsWith('.pdf')) {
    fileToOpen = args[argsLength - 1];
}

app.whenReady().then(()=>{
            protocol.interceptFileProtocol('file',(request,callback) => {
                console.log(request.url);
                callback({ path:  request.url.substr(8) });
            }
        )
    }
);

app.on('open-file', (event, path) => {
    event.preventDefault();
    if (app.isReady()) {
        if (wins.length === 0) {
            createWindow(path.toString());
        } else {
            const focusedWin = BrowserWindow.getFocusedWindow();
            focusedWin.webContents.send('file-open', path.toString());
        }
    }
    fileToOpen = path.toString();
});

app.whenReady().then(() => {
    if (fileToOpen) {
        createWindow(fileToOpen);
    } else {
        createWindow();
    }
});

app.on('window-all-closed', () => {
    app.quit();
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
